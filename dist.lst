CCS PCM C Compiler, Version 5.015, 5967               01-feb.-17 00:43

               Filename:   C:\Users\Luis\Documents\Proyectos PIC\distancia\dist.lst

               ROM used:   1175 words (14%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           28 (8%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2E3
0003:  NOP
.................... #include <16F886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
0004:  DATA C4,24
0005:  DATA 53,2A
0006:  DATA 41,27
0007:  DATA C3,24
0008:  DATA 41,10
0009:  DATA CE,30
000A:  DATA 4E,10
000B:  DATA E3,36
000C:  DATA 00,00
000D:  DATA C4,34
000E:  DATA 73,3A
000F:  DATA 61,37
0010:  DATA E3,34
0011:  DATA 61,1D
0012:  DATA A0,12
0013:  DATA B0,19
0014:  DATA EC,3A
0015:  DATA E3,36
0016:  DATA 00,00
0017:  DATA C4,34
0018:  DATA 73,3A
0019:  DATA 61,37
001A:  DATA E3,34
001B:  DATA 61,1D
001C:  DATA A0,12
001D:  DATA B0,19
001E:  DATA EC,3A
001F:  DATA E3,36
0020:  DATA 00,01
0021:  DATA C4,34
0022:  DATA 73,3A
0023:  DATA 61,37
0024:  DATA E3,34
0025:  DATA 61,1D
0026:  DATA A0,12
0027:  DATA B0,19
0028:  DATA EC,3A
0029:  DATA E3,36
002A:  DATA 00,01
002B:  DATA C4,34
002C:  DATA 73,3A
002D:  DATA 61,37
002E:  DATA E3,34
002F:  DATA 61,1D
0030:  DATA A0,12
0031:  DATA B0,19
0032:  DATA EC,3A
0033:  DATA E3,36
0034:  DATA 00,01
0035:  DATA C4,34
0036:  DATA 73,3A
0037:  DATA 61,37
0038:  DATA E3,34
0039:  DATA 61,1D
003A:  DATA A0,12
003B:  DATA B0,19
003C:  DATA EC,3A
003D:  DATA E3,36
003E:  DATA 00,01
003F:  DATA C4,34
0040:  DATA 73,3A
0041:  DATA 61,37
0042:  DATA E3,34
0043:  DATA 61,1D
0044:  DATA A0,12
0045:  DATA B0,19
0046:  DATA EC,3A
0047:  DATA E3,36
0048:  DATA 00,00
*
01D1:  MOVF   0B,W
01D2:  MOVWF  23
01D3:  BCF    0B.7
01D4:  BSF    03.5
01D5:  BSF    03.6
01D6:  BSF    0C.7
01D7:  BSF    0C.0
01D8:  NOP
01D9:  NOP
01DA:  BCF    03.5
01DB:  BCF    03.6
01DC:  BTFSC  23.7
01DD:  BSF    0B.7
01DE:  BSF    03.6
01DF:  MOVF   0C,W
01E0:  ANDLW  7F
01E1:  BTFSC  03.2
01E2:  GOTO   225
01E3:  BCF    03.6
01E4:  MOVWF  23
01E5:  BSF    03.6
01E6:  MOVF   0D,W
01E7:  BCF    03.6
01E8:  MOVWF  24
01E9:  BSF    03.6
01EA:  MOVF   0F,W
01EB:  BCF    03.6
01EC:  MOVWF  25
01ED:  MOVF   23,W
01EE:  MOVWF  2C
01EF:  CALL   1A5
01F0:  MOVF   24,W
01F1:  BSF    03.6
01F2:  MOVWF  0D
01F3:  BCF    03.6
01F4:  MOVF   25,W
01F5:  BSF    03.6
01F6:  MOVWF  0F
01F7:  BCF    03.6
01F8:  MOVF   0B,W
01F9:  MOVWF  26
01FA:  BCF    0B.7
01FB:  BSF    03.5
01FC:  BSF    03.6
01FD:  BSF    0C.7
01FE:  BSF    0C.0
01FF:  NOP
0200:  NOP
0201:  BCF    03.5
0202:  BCF    03.6
0203:  BTFSC  26.7
0204:  BSF    0B.7
0205:  BSF    03.6
0206:  RLF    0C,W
0207:  RLF    0E,W
0208:  ANDLW  7F
0209:  BTFSC  03.2
020A:  GOTO   225
020B:  BCF    03.6
020C:  MOVWF  23
020D:  BSF    03.6
020E:  MOVF   0D,W
020F:  BCF    03.6
0210:  MOVWF  24
0211:  BSF    03.6
0212:  MOVF   0F,W
0213:  BCF    03.6
0214:  MOVWF  25
0215:  MOVF   23,W
0216:  MOVWF  2C
0217:  CALL   1A5
0218:  MOVF   24,W
0219:  BSF    03.6
021A:  MOVWF  0D
021B:  BCF    03.6
021C:  MOVF   25,W
021D:  BSF    03.6
021E:  MOVWF  0F
021F:  INCF   0D,F
0220:  BTFSC  03.2
0221:  INCF   0F,F
0222:  BCF    03.6
0223:  GOTO   1D1
0224:  BSF    03.6
0225:  BCF    03.6
0226:  BCF    0A.3
0227:  BCF    0A.4
0228:  GOTO   31A (RETURN)
0229:  MOVF   0B,W
022A:  MOVWF  24
022B:  BCF    0B.7
022C:  BSF    03.5
022D:  BSF    03.6
022E:  BSF    0C.7
022F:  BSF    0C.0
0230:  NOP
0231:  NOP
0232:  BCF    03.5
0233:  BCF    03.6
0234:  BTFSC  24.7
0235:  BSF    0B.7
0236:  BTFSC  03.0
0237:  GOTO   260
0238:  BSF    03.6
0239:  MOVF   0C,W
023A:  ANDLW  7F
023B:  BCF    03.6
023C:  MOVWF  24
023D:  BSF    03.6
023E:  MOVF   0D,W
023F:  BCF    03.6
0240:  MOVWF  25
0241:  BSF    03.6
0242:  MOVF   0F,W
0243:  BCF    03.6
0244:  MOVWF  26
0245:  MOVF   24,W
0246:  MOVWF  2C
0247:  CALL   1A5
0248:  MOVF   25,W
0249:  BSF    03.6
024A:  MOVWF  0D
024B:  BCF    03.6
024C:  MOVF   26,W
024D:  BSF    03.6
024E:  MOVWF  0F
024F:  BCF    03.6
0250:  MOVF   0B,W
0251:  MOVWF  27
0252:  BCF    0B.7
0253:  BSF    03.5
0254:  BSF    03.6
0255:  BSF    0C.7
0256:  BSF    0C.0
0257:  NOP
0258:  NOP
0259:  BCF    03.5
025A:  BCF    03.6
025B:  BTFSC  27.7
025C:  BSF    0B.7
025D:  DECFSZ 23,F
025E:  GOTO   260
025F:  GOTO   27F
0260:  BSF    03.6
0261:  RLF    0C,W
0262:  RLF    0E,W
0263:  ANDLW  7F
0264:  BCF    03.6
0265:  MOVWF  24
0266:  BSF    03.6
0267:  MOVF   0D,W
0268:  BCF    03.6
0269:  MOVWF  25
026A:  BSF    03.6
026B:  MOVF   0F,W
026C:  BCF    03.6
026D:  MOVWF  26
026E:  MOVF   24,W
026F:  MOVWF  2C
0270:  CALL   1A5
0271:  MOVF   25,W
0272:  BSF    03.6
0273:  MOVWF  0D
0274:  BCF    03.6
0275:  MOVF   26,W
0276:  BSF    03.6
0277:  MOVWF  0F
0278:  INCF   0D,F
0279:  BTFSC  03.2
027A:  INCF   0F,F
027B:  BCF    03.0
027C:  BCF    03.6
027D:  DECFSZ 23,F
027E:  GOTO   229
027F:  RETURN
0280:  CLRF   2B
0281:  MOVF   04,W
0282:  MOVWF  2A
0283:  BCF    2B.0
0284:  BTFSC  03.7
0285:  BSF    2B.0
0286:  SWAPF  24,W
0287:  IORLW  F0
0288:  MOVWF  26
0289:  ADDWF  26,F
028A:  ADDLW  E2
028B:  MOVWF  27
028C:  ADDLW  32
028D:  MOVWF  29
028E:  MOVF   24,W
028F:  ANDLW  0F
0290:  ADDWF  27,F
0291:  ADDWF  27,F
0292:  ADDWF  29,F
0293:  ADDLW  E9
0294:  MOVWF  28
0295:  ADDWF  28,F
0296:  ADDWF  28,F
0297:  SWAPF  23,W
0298:  ANDLW  0F
0299:  ADDWF  28,F
029A:  ADDWF  29,F
029B:  RLF    28,F
029C:  RLF    29,F
029D:  COMF   29,F
029E:  RLF    29,F
029F:  MOVF   23,W
02A0:  ANDLW  0F
02A1:  ADDWF  29,F
02A2:  RLF    26,F
02A3:  MOVLW  07
02A4:  MOVWF  25
02A5:  MOVLW  0A
02A6:  ADDWF  29,F
02A7:  DECF   28,F
02A8:  BTFSS  03.0
02A9:  GOTO   2A6
02AA:  ADDWF  28,F
02AB:  DECF   27,F
02AC:  BTFSS  03.0
02AD:  GOTO   2AA
02AE:  ADDWF  27,F
02AF:  DECF   26,F
02B0:  BTFSS  03.0
02B1:  GOTO   2AE
02B2:  ADDWF  26,F
02B3:  DECF   25,F
02B4:  BTFSS  03.0
02B5:  GOTO   2B2
02B6:  MOVLW  25
02B7:  MOVWF  04
02B8:  BCF    03.7
02B9:  MOVLW  07
02BA:  ANDWF  2A,W
02BB:  BCF    2A.6
02BC:  ADDWF  04,F
02BD:  MOVLW  29
02BE:  SUBWF  04,W
02BF:  BTFSC  03.2
02C0:  BSF    2A.6
02C1:  MOVF   00,W
02C2:  MOVWF  77
02C3:  BTFSS  03.2
02C4:  GOTO   2CD
02C5:  BTFSC  2A.6
02C6:  GOTO   2CD
02C7:  BTFSC  2A.4
02C8:  GOTO   2DF
02C9:  BTFSC  2A.3
02CA:  GOTO   2CD
02CB:  MOVLW  20
02CC:  GOTO   2D0
02CD:  BSF    2A.3
02CE:  BCF    2A.4
02CF:  MOVLW  30
02D0:  ADDWF  77,F
02D1:  CLRF   24
02D2:  MOVF   04,W
02D3:  MOVWF  23
02D4:  BCF    24.0
02D5:  BTFSC  03.7
02D6:  BSF    24.0
02D7:  MOVF   77,W
02D8:  MOVWF  2C
02D9:  CALL   1A5
02DA:  MOVF   23,W
02DB:  MOVWF  04
02DC:  BCF    03.7
02DD:  BTFSC  24.0
02DE:  BSF    03.7
02DF:  INCF   04,F
02E0:  BTFSS  2A.6
02E1:  GOTO   2BD
02E2:  RETURN
....................  
.................... #list 
....................  
.................... #FUSES INTRC_IO,INTRC,NOWDT,NOPROTECT,PUT,NOBROWNOUT,NOLVP,NOMCLR   
.................... #use delay(clock=4000000) 
*
0049:  MOVLW  2D
004A:  MOVWF  04
004B:  BCF    03.7
004C:  MOVF   00,W
004D:  BTFSC  03.2
004E:  GOTO   05D
004F:  MOVLW  01
0050:  MOVWF  78
0051:  CLRF   77
0052:  DECFSZ 77,F
0053:  GOTO   052
0054:  DECFSZ 78,F
0055:  GOTO   051
0056:  MOVLW  4A
0057:  MOVWF  77
0058:  DECFSZ 77,F
0059:  GOTO   058
005A:  GOTO   05B
005B:  DECFSZ 00,F
005C:  GOTO   04F
005D:  RETURN
.................... #USE standard_io(a,b,c,e) 
.................... #define LCD_ENABLE_PIN PIN_A3 
.................... #define LCD_RS_PIN PIN_A2 
.................... #define LCD_RW_PIN PIN_A1 
.................... #define LCD_DATA4 PIN_B7 
.................... #define LCD_DATA5 PIN_B6 
.................... #define LCD_DATA6 PIN_B5 
.................... #define LCD_DATA7 PIN_B4 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00C2:  BSF    06.7
....................    output_float(LCD_DATA5); 
00C3:  BSF    06.6
....................    output_float(LCD_DATA6); 
00C4:  BSF    06.5
....................    output_float(LCD_DATA7); 
00C5:  BSF    06.4
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00C6:  BCF    03.5
00C7:  BSF    05.1
00C8:  BSF    03.5
00C9:  BCF    05.1
....................    delay_cycles(1); 
00CA:  NOP
....................    lcd_output_enable(1); 
00CB:  BCF    03.5
00CC:  BSF    05.3
00CD:  BSF    03.5
00CE:  BCF    05.3
....................    delay_cycles(1); 
00CF:  NOP
....................    high = lcd_read_nibble(); 
00D0:  BCF    03.5
00D1:  CALL   089
00D2:  MOVF   78,W
00D3:  MOVWF  34
....................        
....................    lcd_output_enable(0); 
00D4:  BCF    05.3
00D5:  BSF    03.5
00D6:  BCF    05.3
....................    delay_cycles(1); 
00D7:  NOP
....................    lcd_output_enable(1); 
00D8:  BCF    03.5
00D9:  BSF    05.3
00DA:  BSF    03.5
00DB:  BCF    05.3
....................    delay_us(1); 
00DC:  NOP
....................    low = lcd_read_nibble(); 
00DD:  BCF    03.5
00DE:  CALL   089
00DF:  MOVF   78,W
00E0:  MOVWF  33
....................        
....................    lcd_output_enable(0); 
00E1:  BCF    05.3
00E2:  BSF    03.5
00E3:  BCF    05.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00E4:  BCF    06.7
....................    output_drive(LCD_DATA5); 
00E5:  BCF    06.6
....................    output_drive(LCD_DATA6); 
00E6:  BCF    06.5
....................    output_drive(LCD_DATA7); 
00E7:  BCF    06.4
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00E8:  BCF    03.5
00E9:  SWAPF  34,W
00EA:  MOVWF  77
00EB:  MOVLW  F0
00EC:  ANDWF  77,F
00ED:  MOVF   77,W
00EE:  IORWF  33,W
00EF:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0089:  CLRF   35
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
008A:  BSF    03.5
008B:  BSF    06.7
008C:  MOVLW  00
008D:  BCF    03.5
008E:  BTFSC  06.7
008F:  MOVLW  01
0090:  IORWF  35,F
....................    n |= input(LCD_DATA5) << 1; 
0091:  BSF    03.5
0092:  BSF    06.6
0093:  MOVLW  00
0094:  BCF    03.5
0095:  BTFSC  06.6
0096:  MOVLW  01
0097:  MOVWF  77
0098:  BCF    03.0
0099:  RLF    77,F
009A:  MOVF   77,W
009B:  IORWF  35,F
....................    n |= input(LCD_DATA6) << 2; 
009C:  BSF    03.5
009D:  BSF    06.5
009E:  MOVLW  00
009F:  BCF    03.5
00A0:  BTFSC  06.5
00A1:  MOVLW  01
00A2:  MOVWF  77
00A3:  RLF    77,F
00A4:  RLF    77,F
00A5:  MOVLW  FC
00A6:  ANDWF  77,F
00A7:  MOVF   77,W
00A8:  IORWF  35,F
....................    n |= input(LCD_DATA7) << 3; 
00A9:  BSF    03.5
00AA:  BSF    06.4
00AB:  MOVLW  00
00AC:  BCF    03.5
00AD:  BTFSC  06.4
00AE:  MOVLW  01
00AF:  MOVWF  77
00B0:  RLF    77,F
00B1:  RLF    77,F
00B2:  RLF    77,F
00B3:  MOVLW  F8
00B4:  ANDWF  77,F
00B5:  MOVF   77,W
00B6:  IORWF  35,F
....................     
....................    return(n); 
00B7:  MOVF   35,W
00B8:  MOVWF  78
....................   #else 
00B9:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
005E:  BTFSC  34.0
005F:  GOTO   062
0060:  BCF    06.7
0061:  GOTO   063
0062:  BSF    06.7
0063:  BSF    03.5
0064:  BCF    06.7
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0065:  BCF    03.5
0066:  BTFSC  34.1
0067:  GOTO   06A
0068:  BCF    06.6
0069:  GOTO   06B
006A:  BSF    06.6
006B:  BSF    03.5
006C:  BCF    06.6
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
006D:  BCF    03.5
006E:  BTFSC  34.2
006F:  GOTO   072
0070:  BCF    06.5
0071:  GOTO   073
0072:  BSF    06.5
0073:  BSF    03.5
0074:  BCF    06.5
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0075:  BCF    03.5
0076:  BTFSC  34.3
0077:  GOTO   07A
0078:  BCF    06.4
0079:  GOTO   07B
007A:  BSF    06.4
007B:  BSF    03.5
007C:  BCF    06.4
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
007D:  NOP
....................    lcd_output_enable(1); 
007E:  BCF    03.5
007F:  BSF    05.3
0080:  BSF    03.5
0081:  BCF    05.3
....................    delay_us(2); 
0082:  GOTO   083
....................    lcd_output_enable(0); 
0083:  BCF    03.5
0084:  BCF    05.3
0085:  BSF    03.5
0086:  BCF    05.3
0087:  BCF    03.5
0088:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00BA:  BSF    03.5
00BB:  BCF    05.3
....................    lcd_rs_tris(); 
00BC:  BCF    05.2
....................    lcd_rw_tris(); 
00BD:  BCF    05.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00BE:  BCF    03.5
00BF:  BCF    05.2
00C0:  BSF    03.5
00C1:  BCF    05.2
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00F0:  MOVF   78,W
00F1:  MOVWF  33
00F2:  BTFSS  33.7
00F3:  GOTO   0F6
00F4:  BSF    03.5
00F5:  GOTO   0C2
....................    lcd_output_rs(address); 
00F6:  MOVF   31,F
00F7:  BTFSS  03.2
00F8:  GOTO   0FB
00F9:  BCF    05.2
00FA:  GOTO   0FC
00FB:  BSF    05.2
00FC:  BSF    03.5
00FD:  BCF    05.2
....................    delay_cycles(1); 
00FE:  NOP
....................    lcd_output_rw(0); 
00FF:  BCF    03.5
0100:  BCF    05.1
0101:  BSF    03.5
0102:  BCF    05.1
....................    delay_cycles(1); 
0103:  NOP
....................    lcd_output_enable(0); 
0104:  BCF    03.5
0105:  BCF    05.3
0106:  BSF    03.5
0107:  BCF    05.3
....................    lcd_send_nibble(n >> 4); 
0108:  BCF    03.5
0109:  SWAPF  32,W
010A:  MOVWF  33
010B:  MOVLW  0F
010C:  ANDWF  33,F
010D:  MOVF   33,W
010E:  MOVWF  34
010F:  CALL   05E
....................    lcd_send_nibble(n & 0xf); 
0110:  MOVF   32,W
0111:  ANDLW  0F
0112:  MOVWF  33
0113:  MOVWF  34
0114:  CALL   05E
0115:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0116:  MOVLW  28
0117:  MOVWF  24
0118:  MOVLW  0C
0119:  MOVWF  25
011A:  MOVLW  01
011B:  MOVWF  26
011C:  MOVLW  06
011D:  MOVWF  27
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
011E:  BCF    05.3
011F:  BSF    03.5
0120:  BCF    05.3
....................    lcd_output_rs(0); 
0121:  BCF    03.5
0122:  BCF    05.2
0123:  BSF    03.5
0124:  BCF    05.2
....................    lcd_output_rw(0); 
0125:  BCF    03.5
0126:  BCF    05.1
0127:  BSF    03.5
0128:  BCF    05.1
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0129:  BCF    06.7
....................    output_drive(LCD_DATA5); 
012A:  BCF    06.6
....................    output_drive(LCD_DATA6); 
012B:  BCF    06.5
....................    output_drive(LCD_DATA7); 
012C:  BCF    06.4
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
012D:  BCF    05.3
....................    lcd_rs_tris(); 
012E:  BCF    05.2
....................    lcd_rw_tris(); 
012F:  BCF    05.1
....................  #endif 
....................      
....................    delay_ms(15); 
0130:  MOVLW  0F
0131:  BCF    03.5
0132:  MOVWF  2D
0133:  CALL   049
....................    for(i=1;i<=3;++i) 
0134:  MOVLW  01
0135:  MOVWF  23
0136:  MOVF   23,W
0137:  SUBLW  03
0138:  BTFSS  03.0
0139:  GOTO   142
....................    { 
....................        lcd_send_nibble(3); 
013A:  MOVLW  03
013B:  MOVWF  34
013C:  CALL   05E
....................        delay_ms(5); 
013D:  MOVLW  05
013E:  MOVWF  2D
013F:  CALL   049
0140:  INCF   23,F
0141:  GOTO   136
....................    } 
....................     
....................    lcd_send_nibble(2); 
0142:  MOVLW  02
0143:  MOVWF  34
0144:  CALL   05E
....................    delay_ms(5); 
0145:  MOVLW  05
0146:  MOVWF  2D
0147:  CALL   049
....................    for(i=0;i<=3;++i) 
0148:  CLRF   23
0149:  MOVF   23,W
014A:  SUBLW  03
014B:  BTFSS  03.0
014C:  GOTO   159
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
014D:  MOVLW  24
014E:  ADDWF  23,W
014F:  MOVWF  04
0150:  BCF    03.7
0151:  MOVF   00,W
0152:  MOVWF  28
0153:  CLRF   31
0154:  MOVF   28,W
0155:  MOVWF  32
0156:  CALL   0BA
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0157:  INCF   23,F
0158:  GOTO   149
0159:  BCF    0A.3
015A:  BCF    0A.4
015B:  GOTO   305 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0193:  DECFSZ 2E,W
0194:  GOTO   196
0195:  GOTO   199
....................       address=LCD_LINE_TWO; 
0196:  MOVLW  40
0197:  MOVWF  2F
0198:  GOTO   19A
....................    else 
....................       address=0; 
0199:  CLRF   2F
....................       
....................    address+=x-1; 
019A:  MOVLW  01
019B:  SUBWF  2D,W
019C:  ADDWF  2F,F
....................    lcd_send_byte(0,0x80|address); 
019D:  MOVF   2F,W
019E:  IORLW  80
019F:  MOVWF  30
01A0:  CLRF   31
01A1:  MOVF   30,W
01A2:  MOVWF  32
01A3:  CALL   0BA
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01A4:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
01A5:  MOVF   2C,W
01A6:  XORLW  07
01A7:  BTFSC  03.2
01A8:  GOTO   1B3
01A9:  XORLW  0B
01AA:  BTFSC  03.2
01AB:  GOTO   1B8
01AC:  XORLW  06
01AD:  BTFSC  03.2
01AE:  GOTO   1C0
01AF:  XORLW  02
01B0:  BTFSC  03.2
01B1:  GOTO   1C6
01B2:  GOTO   1CB
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
01B3:  MOVLW  01
01B4:  MOVWF  2D
01B5:  MOVWF  2E
01B6:  CALL   193
01B7:  GOTO   1D0
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
01B8:  CLRF   31
01B9:  MOVLW  01
01BA:  MOVWF  32
01BB:  CALL   0BA
....................                      delay_ms(2); 
01BC:  MOVLW  02
01BD:  MOVWF  2D
01BE:  CALL   049
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
01BF:  GOTO   1D0
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
01C0:  MOVLW  01
01C1:  MOVWF  2D
01C2:  MOVLW  02
01C3:  MOVWF  2E
01C4:  CALL   193
01C5:  GOTO   1D0
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
01C6:  CLRF   31
01C7:  MOVLW  10
01C8:  MOVWF  32
01C9:  CALL   0BA
01CA:  GOTO   1D0
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
01CB:  MOVLW  01
01CC:  MOVWF  31
01CD:  MOVF   2C,W
01CE:  MOVWF  32
01CF:  CALL   0BA
....................      #endif 
....................    } 
01D0:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #define trig pin_B1 
.................... #define echo input(PIN_B0) 
.................... #define on output_high 
.................... #define off output_low 
.................... #define buzz PIN_C3 
....................  
.................... int16 get_dist(void) 
*
015C:  CLRF   24
015D:  CLRF   23
.................... { 
.................... int16 cm=0; 
.................... on(trig); 
015E:  BSF    03.5
015F:  BCF    06.1
0160:  BCF    03.5
0161:  BSF    06.1
.................... delay_us(50); 
0162:  MOVLW  10
0163:  MOVWF  77
0164:  DECFSZ 77,F
0165:  GOTO   164
0166:  NOP
.................... off(trig); 
0167:  BSF    03.5
0168:  BCF    06.1
0169:  BCF    03.5
016A:  BCF    06.1
.................... set_timer0(0); 
016B:  CLRF   01
.................... while(echo==0 && (get_timer0() < 255)); 
016C:  BSF    03.5
016D:  BSF    06.0
016E:  BCF    03.5
016F:  BTFSC  06.0
0170:  GOTO   175
0171:  MOVF   01,W
0172:  SUBLW  FF
0173:  BTFSS  03.2
0174:  GOTO   16C
.................... set_timer0(0); 
0175:  CLRF   01
.................... while(echo==1 && (get_timer0() < 255)) 
0176:  BSF    03.5
0177:  BSF    06.0
0178:  BCF    03.5
0179:  BTFSS  06.0
017A:  GOTO   189
017B:  MOVF   01,W
017C:  SUBLW  FF
017D:  BTFSC  03.2
017E:  GOTO   189
.................... { 
.................... cm++; 
017F:  INCF   23,F
0180:  BTFSC  03.2
0181:  INCF   24,F
.................... delay_us(58); 
0182:  MOVLW  12
0183:  MOVWF  77
0184:  DECFSZ 77,F
0185:  GOTO   184
0186:  GOTO   187
0187:  NOP
0188:  GOTO   176
.................... } 
.................... delay_ms(50); 
0189:  MOVLW  32
018A:  MOVWF  2D
018B:  CALL   049
.................... return(cm); 
018C:  MOVF   23,W
018D:  MOVWF  78
018E:  MOVF   24,W
018F:  MOVWF  79
0190:  BCF    0A.3
0191:  BCF    0A.4
0192:  GOTO   306 (RETURN)
.................... } 
....................  
.................... void main(void) 
*
02E3:  MOVF   03,W
02E4:  ANDLW  1F
02E5:  MOVWF  03
02E6:  MOVLW  61
02E7:  BSF    03.5
02E8:  MOVWF  0F
02E9:  MOVF   0F,W
02EA:  MOVLW  FF
02EB:  BCF    03.5
02EC:  MOVWF  20
02ED:  BSF    03.5
02EE:  BSF    03.6
02EF:  MOVF   09,W
02F0:  ANDLW  C0
02F1:  MOVWF  09
02F2:  BCF    03.6
02F3:  BCF    1F.4
02F4:  BCF    1F.5
02F5:  MOVLW  00
02F6:  BSF    03.6
02F7:  MOVWF  08
02F8:  BCF    03.5
02F9:  CLRF   07
02FA:  CLRF   08
02FB:  CLRF   09
02FC:  BCF    03.7
.................... { 
.................... setup_timer_0 (RTCC_INTERNAL | RTCC_DIV_256); 
02FD:  BSF    03.5
02FE:  BCF    03.6
02FF:  MOVF   01,W
0300:  ANDLW  C0
0301:  IORLW  07
0302:  MOVWF  01
.................... int16 distancia; 
.................... lcd_init(); 
0303:  BCF    03.5
0304:  GOTO   116
.................... while(true) 
.................... { 
.................... distancia=get_dist(); 
0305:  GOTO   15C
0306:  MOVF   79,W
0307:  MOVWF  22
0308:  MOVF   78,W
0309:  MOVWF  21
.................... if(distancia==0) 
030A:  MOVF   21,F
030B:  BTFSS  03.2
030C:  GOTO   324
030D:  MOVF   22,F
030E:  BTFSS  03.2
030F:  GOTO   324
.................... { 
.................... printf(lcd_putc, "\f"); 
0310:  MOVLW  0C
0311:  MOVWF  2C
0312:  CALL   1A5
.................... printf(lcd_putc,"DISTANCIA NaN cm"); 
0313:  MOVLW  04
0314:  BSF    03.6
0315:  MOVWF  0D
0316:  MOVLW  00
0317:  MOVWF  0F
0318:  BCF    03.6
0319:  GOTO   1D1
.................... off(buzz); 
031A:  BCF    20.3
031B:  MOVF   20,W
031C:  BSF    03.5
031D:  MOVWF  07
031E:  BCF    03.5
031F:  BCF    07.3
.................... delay_ms(50); 
0320:  MOVLW  32
0321:  MOVWF  2D
0322:  CALL   049
.................... } 
0323:  GOTO   495
.................... else if(distancia>0 && distancia<6) 
0324:  MOVF   21,F
0325:  BTFSS  03.2
0326:  GOTO   32A
0327:  MOVF   22,F
0328:  BTFSC  03.2
0329:  GOTO   35B
032A:  MOVF   22,F
032B:  BTFSS  03.2
032C:  GOTO   35B
032D:  MOVF   21,W
032E:  SUBLW  05
032F:  BTFSS  03.0
0330:  GOTO   35B
.................... { 
.................... off(buzz); 
0331:  BCF    20.3
0332:  MOVF   20,W
0333:  BSF    03.5
0334:  MOVWF  07
0335:  BCF    03.5
0336:  BCF    07.3
.................... printf(lcd_putc, "\f"); 
0337:  MOVLW  0C
0338:  MOVWF  2C
0339:  CALL   1A5
.................... printf(lcd_putc,"Distancia: %03lucm",distancia); 
033A:  MOVLW  0D
033B:  BSF    03.6
033C:  MOVWF  0D
033D:  MOVLW  00
033E:  MOVWF  0F
033F:  BCF    03.0
0340:  MOVLW  0B
0341:  BCF    03.6
0342:  MOVWF  23
0343:  CALL   229
0344:  MOVLW  0A
0345:  MOVWF  04
0346:  MOVF   22,W
0347:  MOVWF  24
0348:  MOVF   21,W
0349:  MOVWF  23
034A:  CALL   280
034B:  MOVLW  63
034C:  MOVWF  2C
034D:  CALL   1A5
034E:  MOVLW  6D
034F:  MOVWF  2C
0350:  CALL   1A5
.................... on(buzz); 
0351:  BCF    20.3
0352:  MOVF   20,W
0353:  BSF    03.5
0354:  MOVWF  07
0355:  BCF    03.5
0356:  BSF    07.3
.................... delay_ms(50); 
0357:  MOVLW  32
0358:  MOVWF  2D
0359:  CALL   049
.................... } 
035A:  GOTO   495
.................... else if(distancia<=10 && distancia>6) 
035B:  MOVF   22,F
035C:  BTFSS  03.2
035D:  GOTO   39C
035E:  MOVF   21,W
035F:  SUBLW  0A
0360:  BTFSS  03.0
0361:  GOTO   39C
0362:  MOVF   22,F
0363:  BTFSS  03.2
0364:  GOTO   369
0365:  MOVF   21,W
0366:  SUBLW  06
0367:  BTFSC  03.0
0368:  GOTO   39C
.................... { 
.................... off(buzz); 
0369:  BCF    20.3
036A:  MOVF   20,W
036B:  BSF    03.5
036C:  MOVWF  07
036D:  BCF    03.5
036E:  BCF    07.3
.................... printf(lcd_putc, "\f"); 
036F:  MOVLW  0C
0370:  MOVWF  2C
0371:  CALL   1A5
.................... printf(lcd_putc,"Distancia: %03lucm",distancia); 
0372:  MOVLW  17
0373:  BSF    03.6
0374:  MOVWF  0D
0375:  MOVLW  00
0376:  MOVWF  0F
0377:  BCF    03.0
0378:  MOVLW  0B
0379:  BCF    03.6
037A:  MOVWF  23
037B:  CALL   229
037C:  MOVLW  0A
037D:  MOVWF  04
037E:  MOVF   22,W
037F:  MOVWF  24
0380:  MOVF   21,W
0381:  MOVWF  23
0382:  CALL   280
0383:  MOVLW  63
0384:  MOVWF  2C
0385:  CALL   1A5
0386:  MOVLW  6D
0387:  MOVWF  2C
0388:  CALL   1A5
.................... on(buzz); 
0389:  BCF    20.3
038A:  MOVF   20,W
038B:  BSF    03.5
038C:  MOVWF  07
038D:  BCF    03.5
038E:  BSF    07.3
.................... delay_ms(200); 
038F:  MOVLW  C8
0390:  MOVWF  2D
0391:  CALL   049
.................... off(buzz); 
0392:  BCF    20.3
0393:  MOVF   20,W
0394:  BSF    03.5
0395:  MOVWF  07
0396:  BCF    03.5
0397:  BCF    07.3
.................... delay_ms(200); 
0398:  MOVLW  C8
0399:  MOVWF  2D
039A:  CALL   049
.................... } 
039B:  GOTO   495
.................... else if(distancia>10 && distancia<=20) 
039C:  MOVF   22,F
039D:  BTFSS  03.2
039E:  GOTO   3A3
039F:  MOVF   21,W
03A0:  SUBLW  0A
03A1:  BTFSC  03.0
03A2:  GOTO   3E1
03A3:  MOVF   22,F
03A4:  BTFSS  03.2
03A5:  GOTO   3E1
03A6:  MOVF   21,W
03A7:  SUBLW  14
03A8:  BTFSS  03.0
03A9:  GOTO   3E1
.................... { 
.................... off(buzz); 
03AA:  BCF    20.3
03AB:  MOVF   20,W
03AC:  BSF    03.5
03AD:  MOVWF  07
03AE:  BCF    03.5
03AF:  BCF    07.3
.................... printf(lcd_putc, "\f"); 
03B0:  MOVLW  0C
03B1:  MOVWF  2C
03B2:  CALL   1A5
.................... printf(lcd_putc,"Distancia: %03lucm",distancia); 
03B3:  MOVLW  21
03B4:  BSF    03.6
03B5:  MOVWF  0D
03B6:  MOVLW  00
03B7:  MOVWF  0F
03B8:  BCF    03.0
03B9:  MOVLW  0B
03BA:  BCF    03.6
03BB:  MOVWF  23
03BC:  CALL   229
03BD:  MOVLW  0A
03BE:  MOVWF  04
03BF:  MOVF   22,W
03C0:  MOVWF  24
03C1:  MOVF   21,W
03C2:  MOVWF  23
03C3:  CALL   280
03C4:  MOVLW  63
03C5:  MOVWF  2C
03C6:  CALL   1A5
03C7:  MOVLW  6D
03C8:  MOVWF  2C
03C9:  CALL   1A5
.................... on(buzz); 
03CA:  BCF    20.3
03CB:  MOVF   20,W
03CC:  BSF    03.5
03CD:  MOVWF  07
03CE:  BCF    03.5
03CF:  BSF    07.3
.................... delay_ms(200); 
03D0:  MOVLW  C8
03D1:  MOVWF  2D
03D2:  CALL   049
.................... off(buzz); 
03D3:  BCF    20.3
03D4:  MOVF   20,W
03D5:  BSF    03.5
03D6:  MOVWF  07
03D7:  BCF    03.5
03D8:  BCF    07.3
.................... delay_ms(350); 
03D9:  MOVLW  02
03DA:  MOVWF  23
03DB:  MOVLW  AF
03DC:  MOVWF  2D
03DD:  CALL   049
03DE:  DECFSZ 23,F
03DF:  GOTO   3DB
.................... } 
03E0:  GOTO   495
.................... else if(distancia>20 && distancia<=30) 
03E1:  MOVF   22,F
03E2:  BTFSS  03.2
03E3:  GOTO   3E8
03E4:  MOVF   21,W
03E5:  SUBLW  14
03E6:  BTFSC  03.0
03E7:  GOTO   426
03E8:  MOVF   22,F
03E9:  BTFSS  03.2
03EA:  GOTO   426
03EB:  MOVF   21,W
03EC:  SUBLW  1E
03ED:  BTFSS  03.0
03EE:  GOTO   426
.................... { 
.................... off(buzz); 
03EF:  BCF    20.3
03F0:  MOVF   20,W
03F1:  BSF    03.5
03F2:  MOVWF  07
03F3:  BCF    03.5
03F4:  BCF    07.3
.................... printf(lcd_putc, "\f"); 
03F5:  MOVLW  0C
03F6:  MOVWF  2C
03F7:  CALL   1A5
.................... printf(lcd_putc,"Distancia: %03lucm",distancia); 
03F8:  MOVLW  2B
03F9:  BSF    03.6
03FA:  MOVWF  0D
03FB:  MOVLW  00
03FC:  MOVWF  0F
03FD:  BCF    03.0
03FE:  MOVLW  0B
03FF:  BCF    03.6
0400:  MOVWF  23
0401:  CALL   229
0402:  MOVLW  0A
0403:  MOVWF  04
0404:  MOVF   22,W
0405:  MOVWF  24
0406:  MOVF   21,W
0407:  MOVWF  23
0408:  CALL   280
0409:  MOVLW  63
040A:  MOVWF  2C
040B:  CALL   1A5
040C:  MOVLW  6D
040D:  MOVWF  2C
040E:  CALL   1A5
.................... on(buzz); 
040F:  BCF    20.3
0410:  MOVF   20,W
0411:  BSF    03.5
0412:  MOVWF  07
0413:  BCF    03.5
0414:  BSF    07.3
.................... delay_ms(200); 
0415:  MOVLW  C8
0416:  MOVWF  2D
0417:  CALL   049
.................... off(buzz); 
0418:  BCF    20.3
0419:  MOVF   20,W
041A:  BSF    03.5
041B:  MOVWF  07
041C:  BCF    03.5
041D:  BCF    07.3
.................... delay_ms(550); 
041E:  MOVLW  05
041F:  MOVWF  23
0420:  MOVLW  6E
0421:  MOVWF  2D
0422:  CALL   049
0423:  DECFSZ 23,F
0424:  GOTO   420
.................... } 
0425:  GOTO   495
.................... else if(distancia>30 && distancia<=40) 
0426:  MOVF   22,F
0427:  BTFSS  03.2
0428:  GOTO   42D
0429:  MOVF   21,W
042A:  SUBLW  1E
042B:  BTFSC  03.0
042C:  GOTO   46B
042D:  MOVF   22,F
042E:  BTFSS  03.2
042F:  GOTO   46B
0430:  MOVF   21,W
0431:  SUBLW  28
0432:  BTFSS  03.0
0433:  GOTO   46B
.................... { 
.................... off(buzz); 
0434:  BCF    20.3
0435:  MOVF   20,W
0436:  BSF    03.5
0437:  MOVWF  07
0438:  BCF    03.5
0439:  BCF    07.3
.................... printf(lcd_putc, "\f"); 
043A:  MOVLW  0C
043B:  MOVWF  2C
043C:  CALL   1A5
.................... printf(lcd_putc,"Distancia: %03lucm",distancia); 
043D:  MOVLW  35
043E:  BSF    03.6
043F:  MOVWF  0D
0440:  MOVLW  00
0441:  MOVWF  0F
0442:  BCF    03.0
0443:  MOVLW  0B
0444:  BCF    03.6
0445:  MOVWF  23
0446:  CALL   229
0447:  MOVLW  0A
0448:  MOVWF  04
0449:  MOVF   22,W
044A:  MOVWF  24
044B:  MOVF   21,W
044C:  MOVWF  23
044D:  CALL   280
044E:  MOVLW  63
044F:  MOVWF  2C
0450:  CALL   1A5
0451:  MOVLW  6D
0452:  MOVWF  2C
0453:  CALL   1A5
.................... on(buzz); 
0454:  BCF    20.3
0455:  MOVF   20,W
0456:  BSF    03.5
0457:  MOVWF  07
0458:  BCF    03.5
0459:  BSF    07.3
.................... delay_ms(200); 
045A:  MOVLW  C8
045B:  MOVWF  2D
045C:  CALL   049
.................... off(buzz); 
045D:  BCF    20.3
045E:  MOVF   20,W
045F:  BSF    03.5
0460:  MOVWF  07
0461:  BCF    03.5
0462:  BCF    07.3
.................... delay_ms(700); 
0463:  MOVLW  04
0464:  MOVWF  23
0465:  MOVLW  AF
0466:  MOVWF  2D
0467:  CALL   049
0468:  DECFSZ 23,F
0469:  GOTO   465
.................... } 
046A:  GOTO   495
.................... else if(distancia>40) 
046B:  MOVF   22,F
046C:  BTFSS  03.2
046D:  GOTO   472
046E:  MOVF   21,W
046F:  SUBLW  28
0470:  BTFSC  03.0
0471:  GOTO   495
.................... { 
.................... off(buzz); 
0472:  BCF    20.3
0473:  MOVF   20,W
0474:  BSF    03.5
0475:  MOVWF  07
0476:  BCF    03.5
0477:  BCF    07.3
.................... printf(lcd_putc, "\f"); 
0478:  MOVLW  0C
0479:  MOVWF  2C
047A:  CALL   1A5
.................... printf(lcd_putc,"Distancia: %03lucm",distancia); 
047B:  MOVLW  3F
047C:  BSF    03.6
047D:  MOVWF  0D
047E:  MOVLW  00
047F:  MOVWF  0F
0480:  BCF    03.0
0481:  MOVLW  0B
0482:  BCF    03.6
0483:  MOVWF  23
0484:  CALL   229
0485:  MOVLW  0A
0486:  MOVWF  04
0487:  MOVF   22,W
0488:  MOVWF  24
0489:  MOVF   21,W
048A:  MOVWF  23
048B:  CALL   280
048C:  MOVLW  63
048D:  MOVWF  2C
048E:  CALL   1A5
048F:  MOVLW  6D
0490:  MOVWF  2C
0491:  CALL   1A5
.................... delay_ms(100); 
0492:  MOVLW  64
0493:  MOVWF  2D
0494:  CALL   049
.................... } 
0495:  GOTO   305
.................... } 
.................... } 
0496:  SLEEP

Configuration Fuses:
   Word  1: 2CC5   INTRC NOWDT PUT NOMCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
